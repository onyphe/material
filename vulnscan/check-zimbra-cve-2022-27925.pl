#!/usr/bin/env perl
#
# ONYPHE 2023 - Patrice <GomoR> Auffret
#
# Version 1.1
#
# This program is a non-intrusive check for Zimbra CVE-2022-27925.
#
# It uses both POST & GET requests to mboximport endpoint to check for specific
# strings in response body to assert if the target is vulnerable or not.
#
# You may need to install the following dependencies (Debian-based systems):
#
# sudo apt install perl libwww-perl liblwp-protocol-https-perl
#
use strict;
use warnings;

use LWP::UserAgent;
use LWP::Protocol::https;

#
# Example usage:
#
# perl check-zimbra-cve-2022-27925.pl https://www.example.com:1443/
# perl check-zimbra-cve-2022-27925.pl https://www.example.com admin
# perl check-zimbra-cve-2022-27925.pl https://www.example.com user@example.com
#
my $url = shift or die("Usage: $0 https://www.example.com [ email_account ]\n");
my $account = shift;

# Verify arguments:
if ($url !~ m{^https?://}) {
   die("ERROR: give a complete URL like https://example.com as a target to check\n");
}

# Select default user account when not provided by user:
if (!defined($account)) {
   my ($domain) = $url =~ m{^https?://([^:/]+)};
   $account = 'admin@'.$domain;
}

# Use this configuration for checking:
print "Using URL:     [$url]\n";
print "Using account: [$account]\n\n";

# Create user agent, allow http & https and disable TLS certificate verifications.
# Configure proxy with HTTP_PROXY environment variable if required:
my $ua = LWP::UserAgent->new(
   agent => 'Check-Zimbra-CVE-2022-27925/1.1',
   protocols_allowed => ['http', 'https'],
   timeout => 10,
   ssl_opts => { verify_hostname => 0, SSL_verify_mode => 0x00 },
);
$ua->env_proxy;

# Fetch exact version:
get_version($url);

# Send GET & POST requests for two non-intrusive checks:
get_check($url);
post_check($url, $account);

exit(0);

#
# Subroutines
#

sub get_version {
   my ($url) = @_;

   $url =~ s{/*$}{/js/zimbraMail/share/model/ZmSettings.js};

   print "Sending version request: [GET $url]\n";

   # Fetch exact version:
   my $response = $ua->get($url);
   if (!defined($response)) {
      warn("ERROR: GET version request failed: $!\n");
   }

   # Analyze received response:
   my $content = $response->content;
   if ($content =~ m{this\.registerSetting\("CLIENT_VERSION"}si) {
      my ($release, $version) = $content =~ m{CLIENT_RELEASE.+?defaultValue:"([^"]+)".+?CLIENT_VERSION.+?defaultValue:"([^"]+)"}si;
      if (defined($release) && defined($version)) {
         print "Version[$version] - Release[$release]\n";
      }
      else {
         print "ERROR: version & release not found in response, skipping\n";
      }
   }
   else {
      print "ERROR: version information not found in response, skipping\n";
   }
}

sub get_check {
   my ($url) = @_;

   $url =~ s{/*$}{/service/extension/backup/mboximport};

   print "Sending check request: [GET $url]\n";

   my $response = $ua->get($url);
   if (!defined($response)) {
      warn("ERROR: GET check request failed: $!\n");
   }

   # Analyze received response:
   my $content = $response->content;
   print $content =~ m{Error 500 Server Error.+?Problem accessing /service/extension/backup/mboximport}si
      ? "\n*** Target IS vulnerable to CVE-2022-27925"
      : "\nTarget is not vulnerable to CVE-2022-27925";
   print "\n\nReceived content:\n\n$content\n";
}

sub post_check {
   my ($url, $account) = @_;

   $url =~ s{/*$}{/service/extension/backup/mboximport?account-name=$account&account-status=1&ow=cmd};

   print "Sending check request: [POST $url]\n";

   my $response = $ua->post($url, []);
   if (!defined($response)) {
      warn("ERROR: POST check request failed: $!\n");
   }

   # Analyze received response:
   my $content = $response->content;
   print $content =~ m{Error 401 no authtoken cookie.+?Problem accessing /service/extension/backup/mboximport}si
      ? "\n*** Target IS vulnerable to CVE-2022-27925"
      : "\nTarget is not vulnerable to CVE-2022-27925";
   print "\n\nReceived content:\n\n$content\n";
}
